import json
import os

j = json.load(open(input("blocks.json >> "), "r"))
o = input("output directory >> ")
unknown = list()

template_noprop = """// AUTOGENERATED. DO NOT MODIFY
using nylium.Core.Level;

namespace nylium.Core.Block.Blocks {{

    public class {0} : BaseBlock {{

        public {0}(Chunk chunk, int x, int y, int z) : base(chunk, x, y, z, {1}, {2}) {{ }}
    }}
}}
"""

template_prop = """// AUTOGENERATED. DO NOT MODIFY
using nylium.Core.Level;

namespace nylium.Core.Block.Blocks {{

    public class {0} : BaseBlock {{

{6}
        public {0}(Chunk chunk, int x, int y, int z) : base(chunk, x, y, z, {1}, {2}) {{ }}

        public {0}(Chunk chunk, int x, int y, int z, ushort state) : base(chunk, x, y, z, {1}, state) {{
            {5}
        }}

        public {0}(Chunk chunk, int x, int y, int z{3}) : base(chunk, x, y, z, {1}, {2}) {{
{4}
        }}
    }}
}}
"""

template_noteblock = """// AUTOGENERATED. DO NOT MODIFY
using nylium.Core.Level;

namespace nylium.Core.Block.Blocks {{

    public class {0} : BaseBlock {{

{6}
        public {0}(Chunk chunk, int x, int y, int z) : base(chunk, x, y, z, {1}, {2}) {{ }}

        public {0}(Chunk chunk, int x, int y, int z, ushort state) : base(chunk, x, y, z, {1}, state) {{{5}
        }}

        public {0}(Chunk chunk, int x, int y, int z{3}) : base(chunk, x, y, z, {1}, {2}) {{
{4}
        }}

        public enum InstrumentType {{
            
            Harp,
            Basedrum,
            Snare,
            Hat,
            Bass,
            Flute,
            Bell,
            Guitar,
            Chime,
            Xylophone,
            IronXylophone,
            CowBell,
            Didgeridoo,
            Bit,
            Banjo,
            Pling
        }}
    }}
}}
"""

template_slab = """// AUTOGENERATED. DO NOT MODIFY
using nylium.Core.Level;

namespace nylium.Core.Block.Blocks {{

    public class {0} : BaseBlock {{

{6}
        public {0}(Chunk chunk, int x, int y, int z) : base(chunk, x, y, z, {1}, {2}) {{ }}

        public {0}(Chunk chunk, int x, int y, int z, ushort state) : base(chunk, x, y, z, {1}, state) {{{5}
        }}

        public {0}(Chunk chunk, int x, int y, int z{3}) : base(chunk, x, y, z, {1}, {2}) {{
{4}
        }}

        public enum BlockType {{
            
            Top,
            Bottom,
            Double
        }}
    }}
}}
"""

template_door = """// AUTOGENERATED. DO NOT MODIFY
using nylium.Core.Level;

namespace nylium.Core.Block.Blocks {{

    public class {0} : BaseBlock {{

{6}
        public {0}(Chunk chunk, int x, int y, int z) : base(chunk, x, y, z, {1}, {2}) {{ }}

        public {0}(Chunk chunk, int x, int y, int z, ushort state) : base(chunk, x, y, z, {1}, state) {{{5}
        }}

        public {0}(Chunk chunk, int x, int y, int z{3}) : base(chunk, x, y, z, {1}, {2}) {{
{4}
        }}

        public enum HingeType {{
            
            Left,
            Right
        }}
    }}
}}
"""

template_bamboo = """// AUTOGENERATED. DO NOT MODIFY
using nylium.Core.Level;

namespace nylium.Core.Block.Blocks {{

    public class {0} : BaseBlock {{

{6}
        public {0}(Chunk chunk, int x, int y, int z) : base(chunk, x, y, z, {1}, {2}) {{ }}

        public {0}(Chunk chunk, int x, int y, int z, ushort state) : base(chunk, x, y, z, {1}, state) {{{5}
        }}

        public {0}(Chunk chunk, int x, int y, int z{3}) : base(chunk, x, y, z, {1}, {2}) {{
{4}
        }}

        public enum LeavesType {{
            
            None,
            Small,
            Large
        }}
    }}
}}
"""

template_comparator = """// AUTOGENERATED. DO NOT MODIFY
using nylium.Core.Level;

namespace nylium.Core.Block.Blocks {{

    public class {0} : BaseBlock {{

{6}
        public {0}(Chunk chunk, int x, int y, int z) : base(chunk, x, y, z, {1}, {2}) {{ }}

        public {0}(Chunk chunk, int x, int y, int z, ushort state) : base(chunk, x, y, z, {1}, state) {{{5}
        }}

        public {0}(Chunk chunk, int x, int y, int z{3}) : base(chunk, x, y, z, {1}, {2}) {{
{4}
        }}

        public enum BlockMode {{
            
            Compare,
            Subtract
        }}
    }}
}}
"""

template_structure = """// AUTOGENERATED. DO NOT MODIFY
using nylium.Core.Level;

namespace nylium.Core.Block.Blocks {{

    public class {0} : BaseBlock {{

{6}
        public {0}(Chunk chunk, int x, int y, int z) : base(chunk, x, y, z, {1}, {2}) {{ }}

        public {0}(Chunk chunk, int x, int y, int z, ushort state) : base(chunk, x, y, z, {1}, state) {{{5}
        }}

        public {0}(Chunk chunk, int x, int y, int z{3}) : base(chunk, x, y, z, {1}, {2}) {{
{4}
        }}

        public enum BlockMode {{

            Save,
            Load,
            Corner,
            Data
        }}
    }}
}}
"""

template_bell = """// AUTOGENERATED. DO NOT MODIFY
using nylium.Core.Level;

namespace nylium.Core.Block.Blocks {{

    public class {0} : BaseBlock {{

{6}
        public {0}(Chunk chunk, int x, int y, int z) : base(chunk, x, y, z, {1}, {2}) {{ }}

        public {0}(Chunk chunk, int x, int y, int z, ushort state) : base(chunk, x, y, z, {1}, state) {{{5}
        }}

        public {0}(Chunk chunk, int x, int y, int z{3}) : base(chunk, x, y, z, {1}, {2}) {{
{4}
        }}

        public enum AttachmentType {{

            Floor,
            Ceiling,
            SingleWall,
            DoubleWall
        }}
    }}
}}
"""

template_piston = """// AUTOGENERATED. DO NOT MODIFY
using nylium.Core.Level;

namespace nylium.Core.Block.Blocks {{

    public class {0} : BaseBlock {{

{6}
        public {0}(Chunk chunk, int x, int y, int z) : base(chunk, x, y, z, {1}, {2}) {{ }}

        public {0}(Chunk chunk, int x, int y, int z, ushort state) : base(chunk, x, y, z, {1}, state) {{{5}
        }}

        public {0}(Chunk chunk, int x, int y, int z{3}) : base(chunk, x, y, z, {1}, {2}) {{
{4}
        }}

        public enum BlockType {{

            Normal,
            Sticky
        }}
    }}
}}
"""

template_chest = """// AUTOGENERATED. DO NOT MODIFY
using nylium.Core.Level;

namespace nylium.Core.Block.Blocks {{

    public class {0} : BaseBlock {{

{6}
        public {0}(Chunk chunk, int x, int y, int z) : base(chunk, x, y, z, {1}, {2}) {{ }}

        public {0}(Chunk chunk, int x, int y, int z, ushort state) : base(chunk, x, y, z, {1}, state) {{{5}
        }}

        public {0}(Chunk chunk, int x, int y, int z{3}) : base(chunk, x, y, z, {1}, {2}) {{
{4}
        }}

        public enum BlockType {{

            Single,
            Left,
            Right
        }}
    }}
}}
"""

arg_template = ", {0} {1}"
if_template = """if({0}) {{
                {1}
            }} else """
setter_template = "{0} = {1};\n                "
prop_template = "        public {0} {1} {{ get; }}\n"

for block in j:
    named_id = block
    id = j[block]["id"]
    default_state = j[block]["default_state"]
    has_prop = False
    generated = ""
    cls_name = named_id.replace("minecraft:", "").replace("_", " ").title().replace(" ", "") + "Block"

    args = ""
    ifs = ""
    setters = ""
    props = ""

    add_args = True

    for state in j[block]["states"]:
        state_id = state

        if "properties" in j[block]["states"][state]:
            has_prop = True
            check = ""
            setter = ""
            
            for prop in j[block]["states"][state]["properties"]:
                prop_name = prop

                if prop_name == "short":
                    prop_name = "_short"

                prop_val = j[block]["states"][state]["properties"][prop]
                prop_type = prop_name
                if_val = prop_val

                if type(prop_val) == bool:
                    prop_type = "bool"
                    if_val = str(if_val).lower()
                elif type(prop_val) == int:
                    prop_type = "int"
                elif type(prop_val) == float:
                    prop_type = "float"
                else:
                    if prop_name == "axis":
                        prop_type = "Axis"
                        if_val = "Axis." + if_val.upper()
                    elif prop_name == "facing" or prop_name == "face":
                        prop_type = "Face"
                        if_val = "Face." + if_val.capitalize()
                    elif prop_name == "instrument":
                        prop_type = "InstrumentType"
                        if_val = "InstrumentType." + if_val.replace("_", " ").title().replace(" ", "")
                    elif prop_name == "part":
                        prop_type = "Part"
                        if_val = "Part." + if_val.capitalize()
                    elif prop_name == "shape":
                        prop_type = "Shape"
                        if_val = "Shape." + if_val.replace("_", " ").title().replace(" ", "")
                    elif prop_name == "hinge":
                        prop_type = "HingeType"
                        if_val = "HingeType." + if_val.replace("_", " ").title().replace(" ", "")
                    elif prop_name == "half":
                        prop_type = "Half"
                        if_val = "Half." + if_val.replace("_", " ").title().replace(" ", "")
                    elif prop_name == "north":
                        prop_type = "North"
                        if_val = "North." + if_val.replace("_", " ").title().replace(" ", "")
                    elif prop_name == "east":
                        prop_type = "East"
                        if_val = "East." + if_val.replace("_", " ").title().replace(" ", "")
                    elif prop_name == "south":
                        prop_type = "South"
                        if_val = "South." + if_val.replace("_", " ").title().replace(" ", "")
                    elif prop_name == "west":
                        prop_type = "West"
                        if_val = "West." + if_val.replace("_", " ").title().replace(" ", "")
                    elif prop_name == "leaves":
                        prop_type = "LeavesType"
                        if_val = "LeavesType." + if_val.replace("_", " ").title().replace(" ", "")
                    elif prop_name == "mode":
                        prop_type = "BlockMode"
                        if_val = "BlockMode." + if_val.replace("_", " ").title().replace(" ", "")
                    elif prop_name == "attachment":
                        prop_type = "AttachmentType"
                        if_val = "AttachmentType." + if_val.replace("_", " ").title().replace(" ", "")
                    elif prop_name == "orientation":
                        prop_type = "Orientation"
                        if_val = "Orientation." + if_val.replace("_", " ").title().replace(" ", "")
                    elif prop_name == "type":
                        prop_type = "BlockType"
                        if_val = "BlockType." + if_val.replace("_", " ").title().replace(" ", "")
                    else:
                        h = prop_name + "/" + prop_val + " in " + named_id

                        if h not in unknown:
                            print("unknown: " + h)
                            unknown.append(h)
                        continue
                
                check += f"{prop_name} == {if_val} && "
                setter += setter_template.format(prop_name.title(), if_val)

                if add_args:
                    props += prop_template.format(prop_type, prop_name.title())
                    args += arg_template.format(prop_type, prop_name)
            
            ifs += if_template.format(check[:-4], "State = " + state_id + ";")
            setters += if_template.format("state == " + state_id, setter[:-17])

        add_args = False
    
    if named_id == "minecraft:note_block":
        generated = template_noteblock.format("NoteblockBlock", id, default_state, args, ifs[:-6], setters[:-6], props)
    elif named_id.endswith("_door"):
        generated = template_door.format(cls_name, id, default_state, args, ifs[:-6], setters[:-6], props)
    elif named_id.endswith("_slab"):
        generated = template_slab.format(cls_name, id, default_state, args, ifs[:-6], setters[:-6], props)
    elif named_id == "minecraft:bamboo":
        generated = template_bamboo.format(cls_name, id, default_state, args, ifs[:-6], setters[:-6], props)
    elif named_id == "minecraft:bell":
        generated = template_bell.format(cls_name, id, default_state, args, ifs[:-6], setters[:-6], props)
    elif named_id == "minecraft:structure_block":
        generated = template_structure.format(cls_name, id, default_state, args, ifs[:-6], setters[:-6], props)
    elif named_id == "minecraft:comparator":
        generated = template_comparator.format(cls_name, id, default_state, args, ifs[:-6], setters[:-6], props)
    elif "piston" in named_id:
        generated = template_piston.format(cls_name, id, default_state, args, ifs[:-6], setters[:-6], props)
    elif named_id.endswith("chest"):
        generated = template_chest.format(cls_name, id, default_state, args, ifs[:-6], setters[:-6], props)
    else:
        if has_prop:
            generated = template_prop.format(cls_name, id, default_state, args, ifs[:-6], setters[:-6], props)
        else:
            generated = template_noprop.format(cls_name, id, default_state)

    with open(os.path.join(o, cls_name + ".cs"), "w+") as f:
        f.write(generated)