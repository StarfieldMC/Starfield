// AUTOGENERATED. DO NOT MODIFY
using nylium.Core.Level;

namespace nylium.Core.Block.Blocks {

    public class ActivatorRailBlock : BaseBlock {

        public bool Powered { get; }
        public Shape Shape { get; }

        public ActivatorRailBlock(Chunk chunk, int x, int y, int z) : base(chunk, x, y, z, 341, 6833) { }

        public ActivatorRailBlock(Chunk chunk, int x, int y, int z, ushort state) : base(chunk, x, y, z, 341, state) {
            if(state == 6827) {
                Powered = true;
                Shape = Shape.NorthSouth;
            } else if(state == 6828) {
                Powered = true;
                Shape = Shape.EastWest;
            } else if(state == 6829) {
                Powered = true;
                Shape = Shape.AscendingEast;
            } else if(state == 6830) {
                Powered = true;
                Shape = Shape.AscendingWest;
            } else if(state == 6831) {
                Powered = true;
                Shape = Shape.AscendingNorth;
            } else if(state == 6832) {
                Powered = true;
                Shape = Shape.AscendingSouth;
            } else if(state == 6833) {
                Powered = false;
                Shape = Shape.NorthSouth;
            } else if(state == 6834) {
                Powered = false;
                Shape = Shape.EastWest;
            } else if(state == 6835) {
                Powered = false;
                Shape = Shape.AscendingEast;
            } else if(state == 6836) {
                Powered = false;
                Shape = Shape.AscendingWest;
            } else if(state == 6837) {
                Powered = false;
                Shape = Shape.AscendingNorth;
            } else if(state == 6838) {
                Powered = false;
                Shape = Shape.AscendingSouth;
            }
        }

        public ActivatorRailBlock(Chunk chunk, int x, int y, int z, bool powered, Shape shape) : base(chunk, x, y, z, 341, 6833) {
if(powered == true && shape == Shape.NorthSouth) {
                State = 6827;
            } else if(powered == true && shape == Shape.EastWest) {
                State = 6828;
            } else if(powered == true && shape == Shape.AscendingEast) {
                State = 6829;
            } else if(powered == true && shape == Shape.AscendingWest) {
                State = 6830;
            } else if(powered == true && shape == Shape.AscendingNorth) {
                State = 6831;
            } else if(powered == true && shape == Shape.AscendingSouth) {
                State = 6832;
            } else if(powered == false && shape == Shape.NorthSouth) {
                State = 6833;
            } else if(powered == false && shape == Shape.EastWest) {
                State = 6834;
            } else if(powered == false && shape == Shape.AscendingEast) {
                State = 6835;
            } else if(powered == false && shape == Shape.AscendingWest) {
                State = 6836;
            } else if(powered == false && shape == Shape.AscendingNorth) {
                State = 6837;
            } else if(powered == false && shape == Shape.AscendingSouth) {
                State = 6838;
            }
        }
    }
}
