// FILE AUTOGENERATED. DO NOT MODIFY
using System;

namespace nylium.Core.Block.Blocks {

    [Block("minecraft:detector_rail", 92, 1317, 1328, 1323)]
    public class BlockDetectorRail : BlockBase {

        public override ushort State {
            get {
                if(Powered == true && Shape == "north_south") {
                    return 1317;
                }

                if(Powered == true && Shape == "east_west") {
                    return 1318;
                }

                if(Powered == true && Shape == "ascending_east") {
                    return 1319;
                }

                if(Powered == true && Shape == "ascending_west") {
                    return 1320;
                }

                if(Powered == true && Shape == "ascending_north") {
                    return 1321;
                }

                if(Powered == true && Shape == "ascending_south") {
                    return 1322;
                }

                if(Powered == false && Shape == "north_south") {
                    return 1323;
                }

                if(Powered == false && Shape == "east_west") {
                    return 1324;
                }

                if(Powered == false && Shape == "ascending_east") {
                    return 1325;
                }

                if(Powered == false && Shape == "ascending_west") {
                    return 1326;
                }

                if(Powered == false && Shape == "ascending_north") {
                    return 1327;
                }

                if(Powered == false && Shape == "ascending_south") {
                    return 1328;
                }

                return DefaultState;
            }

            set {
                if(value == 1317) {
                    Powered = true;
Shape = "north_south";
                }

                if(value == 1318) {
                    Powered = true;
Shape = "east_west";
                }

                if(value == 1319) {
                    Powered = true;
Shape = "ascending_east";
                }

                if(value == 1320) {
                    Powered = true;
Shape = "ascending_west";
                }

                if(value == 1321) {
                    Powered = true;
Shape = "ascending_north";
                }

                if(value == 1322) {
                    Powered = true;
Shape = "ascending_south";
                }

                if(value == 1323) {
                    Powered = false;
Shape = "north_south";
                }

                if(value == 1324) {
                    Powered = false;
Shape = "east_west";
                }

                if(value == 1325) {
                    Powered = false;
Shape = "ascending_east";
                }

                if(value == 1326) {
                    Powered = false;
Shape = "ascending_west";
                }

                if(value == 1327) {
                    Powered = false;
Shape = "ascending_north";
                }

                if(value == 1328) {
                    Powered = false;
Shape = "ascending_south";
                }

            }
        }

        public bool Powered { get; set; } = false;
        public string Shape { get; set; } = "north_south";

        public BlockDetectorRail() {
            State = DefaultState;
        }

        public BlockDetectorRail(ushort state) : base(state) {
            if(state < MinimumState || state > MaximumState) {
                throw new ArgumentOutOfRangeException("state");
            }

            State = state;
        }

        public BlockDetectorRail(bool powered, string shape) {
            Powered = powered;
            Shape = shape;
        }
    }
}