// AUTOGENERATED. DO NOT MODIFY
using nylium.Core.Level;

namespace nylium.Core.Block.Blocks {

    public class DetectorRailBlock : BaseBlock {

        public bool Powered { get; }
        public Shape Shape { get; }

        public DetectorRailBlock(Chunk chunk, int x, int y, int z) : base(chunk, x, y, z, 92, 1323) { }

        public DetectorRailBlock(Chunk chunk, int x, int y, int z, ushort state) : base(chunk, x, y, z, 92, state) {
            if(state == 1317) {
                Powered = true;
                Shape = Shape.NorthSouth;
            } else if(state == 1318) {
                Powered = true;
                Shape = Shape.EastWest;
            } else if(state == 1319) {
                Powered = true;
                Shape = Shape.AscendingEast;
            } else if(state == 1320) {
                Powered = true;
                Shape = Shape.AscendingWest;
            } else if(state == 1321) {
                Powered = true;
                Shape = Shape.AscendingNorth;
            } else if(state == 1322) {
                Powered = true;
                Shape = Shape.AscendingSouth;
            } else if(state == 1323) {
                Powered = false;
                Shape = Shape.NorthSouth;
            } else if(state == 1324) {
                Powered = false;
                Shape = Shape.EastWest;
            } else if(state == 1325) {
                Powered = false;
                Shape = Shape.AscendingEast;
            } else if(state == 1326) {
                Powered = false;
                Shape = Shape.AscendingWest;
            } else if(state == 1327) {
                Powered = false;
                Shape = Shape.AscendingNorth;
            } else if(state == 1328) {
                Powered = false;
                Shape = Shape.AscendingSouth;
            }
        }

        public DetectorRailBlock(Chunk chunk, int x, int y, int z, bool powered, Shape shape) : base(chunk, x, y, z, 92, 1323) {
if(powered == true && shape == Shape.NorthSouth) {
                State = 1317;
            } else if(powered == true && shape == Shape.EastWest) {
                State = 1318;
            } else if(powered == true && shape == Shape.AscendingEast) {
                State = 1319;
            } else if(powered == true && shape == Shape.AscendingWest) {
                State = 1320;
            } else if(powered == true && shape == Shape.AscendingNorth) {
                State = 1321;
            } else if(powered == true && shape == Shape.AscendingSouth) {
                State = 1322;
            } else if(powered == false && shape == Shape.NorthSouth) {
                State = 1323;
            } else if(powered == false && shape == Shape.EastWest) {
                State = 1324;
            } else if(powered == false && shape == Shape.AscendingEast) {
                State = 1325;
            } else if(powered == false && shape == Shape.AscendingWest) {
                State = 1326;
            } else if(powered == false && shape == Shape.AscendingNorth) {
                State = 1327;
            } else if(powered == false && shape == Shape.AscendingSouth) {
                State = 1328;
            }
        }
    }
}
