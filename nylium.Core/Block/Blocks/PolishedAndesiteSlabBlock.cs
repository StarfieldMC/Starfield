// AUTOGENERATED. DO NOT MODIFY
using nylium.Core.Level;

namespace nylium.Core.Block.Blocks {

    public class PolishedAndesiteSlabBlock : BaseBlock {

        public BlockType Type { get; }
        public bool Waterlogged { get; }

        public PolishedAndesiteSlabBlock(Chunk chunk, int x, int y, int z) : base(chunk, x, y, z, 652, 10862) { }

        public PolishedAndesiteSlabBlock(Chunk chunk, int x, int y, int z, ushort state) : base(chunk, x, y, z, 652, state) {if(state == 10859) {
                Type = BlockType.Top;
                Waterlogged = true;
            } else if(state == 10860) {
                Type = BlockType.Top;
                Waterlogged = false;
            } else if(state == 10861) {
                Type = BlockType.Bottom;
                Waterlogged = true;
            } else if(state == 10862) {
                Type = BlockType.Bottom;
                Waterlogged = false;
            } else if(state == 10863) {
                Type = BlockType.Double;
                Waterlogged = true;
            } else if(state == 10864) {
                Type = BlockType.Double;
                Waterlogged = false;
            }
        }

        public PolishedAndesiteSlabBlock(Chunk chunk, int x, int y, int z, BlockType type, bool waterlogged) : base(chunk, x, y, z, 652, 10862) {
if(type == BlockType.Top && waterlogged == true) {
                State = 10859;
            } else if(type == BlockType.Top && waterlogged == false) {
                State = 10860;
            } else if(type == BlockType.Bottom && waterlogged == true) {
                State = 10861;
            } else if(type == BlockType.Bottom && waterlogged == false) {
                State = 10862;
            } else if(type == BlockType.Double && waterlogged == true) {
                State = 10863;
            } else if(type == BlockType.Double && waterlogged == false) {
                State = 10864;
            }
        }

        public enum BlockType {
            
            Top,
            Bottom,
            Double
        }
    }
}
