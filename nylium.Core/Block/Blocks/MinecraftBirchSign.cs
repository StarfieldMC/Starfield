// FILE AUTOGENERATED. DO NOT MODIFY
using System;

namespace nylium.Core.Block.Blocks {

    public class BlockBirchSign : BlockBase {

        public override string Id { get { return "minecraft:birch_sign"; } }

        public override ushort MinimumState { get { return 3445; } }
        public override ushort MaximumState { get { return 3476; } }
        public override ushort DefaultState { get { return 3446; } }

        public override ushort State {
            get {
                if(Rotation == 0 && Waterlogged == true) {
                    return 3445;
                }

                if(Rotation == 0 && Waterlogged == false) {
                    return 3446;
                }

                if(Rotation == 1 && Waterlogged == true) {
                    return 3447;
                }

                if(Rotation == 1 && Waterlogged == false) {
                    return 3448;
                }

                if(Rotation == 2 && Waterlogged == true) {
                    return 3449;
                }

                if(Rotation == 2 && Waterlogged == false) {
                    return 3450;
                }

                if(Rotation == 3 && Waterlogged == true) {
                    return 3451;
                }

                if(Rotation == 3 && Waterlogged == false) {
                    return 3452;
                }

                if(Rotation == 4 && Waterlogged == true) {
                    return 3453;
                }

                if(Rotation == 4 && Waterlogged == false) {
                    return 3454;
                }

                if(Rotation == 5 && Waterlogged == true) {
                    return 3455;
                }

                if(Rotation == 5 && Waterlogged == false) {
                    return 3456;
                }

                if(Rotation == 6 && Waterlogged == true) {
                    return 3457;
                }

                if(Rotation == 6 && Waterlogged == false) {
                    return 3458;
                }

                if(Rotation == 7 && Waterlogged == true) {
                    return 3459;
                }

                if(Rotation == 7 && Waterlogged == false) {
                    return 3460;
                }

                if(Rotation == 8 && Waterlogged == true) {
                    return 3461;
                }

                if(Rotation == 8 && Waterlogged == false) {
                    return 3462;
                }

                if(Rotation == 9 && Waterlogged == true) {
                    return 3463;
                }

                if(Rotation == 9 && Waterlogged == false) {
                    return 3464;
                }

                if(Rotation == 10 && Waterlogged == true) {
                    return 3465;
                }

                if(Rotation == 10 && Waterlogged == false) {
                    return 3466;
                }

                if(Rotation == 11 && Waterlogged == true) {
                    return 3467;
                }

                if(Rotation == 11 && Waterlogged == false) {
                    return 3468;
                }

                if(Rotation == 12 && Waterlogged == true) {
                    return 3469;
                }

                if(Rotation == 12 && Waterlogged == false) {
                    return 3470;
                }

                if(Rotation == 13 && Waterlogged == true) {
                    return 3471;
                }

                if(Rotation == 13 && Waterlogged == false) {
                    return 3472;
                }

                if(Rotation == 14 && Waterlogged == true) {
                    return 3473;
                }

                if(Rotation == 14 && Waterlogged == false) {
                    return 3474;
                }

                if(Rotation == 15 && Waterlogged == true) {
                    return 3475;
                }

                if(Rotation == 15 && Waterlogged == false) {
                    return 3476;
                }

                return DefaultState;
            }

            set {
                if(value == 3445) {
                    Rotation = 0;
Waterlogged = true;
                }

                if(value == 3446) {
                    Rotation = 0;
Waterlogged = false;
                }

                if(value == 3447) {
                    Rotation = 1;
Waterlogged = true;
                }

                if(value == 3448) {
                    Rotation = 1;
Waterlogged = false;
                }

                if(value == 3449) {
                    Rotation = 2;
Waterlogged = true;
                }

                if(value == 3450) {
                    Rotation = 2;
Waterlogged = false;
                }

                if(value == 3451) {
                    Rotation = 3;
Waterlogged = true;
                }

                if(value == 3452) {
                    Rotation = 3;
Waterlogged = false;
                }

                if(value == 3453) {
                    Rotation = 4;
Waterlogged = true;
                }

                if(value == 3454) {
                    Rotation = 4;
Waterlogged = false;
                }

                if(value == 3455) {
                    Rotation = 5;
Waterlogged = true;
                }

                if(value == 3456) {
                    Rotation = 5;
Waterlogged = false;
                }

                if(value == 3457) {
                    Rotation = 6;
Waterlogged = true;
                }

                if(value == 3458) {
                    Rotation = 6;
Waterlogged = false;
                }

                if(value == 3459) {
                    Rotation = 7;
Waterlogged = true;
                }

                if(value == 3460) {
                    Rotation = 7;
Waterlogged = false;
                }

                if(value == 3461) {
                    Rotation = 8;
Waterlogged = true;
                }

                if(value == 3462) {
                    Rotation = 8;
Waterlogged = false;
                }

                if(value == 3463) {
                    Rotation = 9;
Waterlogged = true;
                }

                if(value == 3464) {
                    Rotation = 9;
Waterlogged = false;
                }

                if(value == 3465) {
                    Rotation = 10;
Waterlogged = true;
                }

                if(value == 3466) {
                    Rotation = 10;
Waterlogged = false;
                }

                if(value == 3467) {
                    Rotation = 11;
Waterlogged = true;
                }

                if(value == 3468) {
                    Rotation = 11;
Waterlogged = false;
                }

                if(value == 3469) {
                    Rotation = 12;
Waterlogged = true;
                }

                if(value == 3470) {
                    Rotation = 12;
Waterlogged = false;
                }

                if(value == 3471) {
                    Rotation = 13;
Waterlogged = true;
                }

                if(value == 3472) {
                    Rotation = 13;
Waterlogged = false;
                }

                if(value == 3473) {
                    Rotation = 14;
Waterlogged = true;
                }

                if(value == 3474) {
                    Rotation = 14;
Waterlogged = false;
                }

                if(value == 3475) {
                    Rotation = 15;
Waterlogged = true;
                }

                if(value == 3476) {
                    Rotation = 15;
Waterlogged = false;
                }

            }
        }

        public int Rotation { get; set; } = 0;
        public bool Waterlogged { get; set; } = false;

        public BlockBirchSign() {
            State = DefaultState;
        }

        public BlockBirchSign(ushort state) {
            if(state < MinimumState || state > MaximumState) {
                throw new ArgumentOutOfRangeException("state");
            }

            State = state;
        }

        public BlockBirchSign(int rotation, bool waterlogged) {
            Rotation = rotation;
            Waterlogged = waterlogged;
        }
    }
}