// AUTOGENERATED. DO NOT MODIFY
using nylium.Core.Level;

namespace nylium.Core.Block.Blocks {

    public class PoweredRailBlock : BaseBlock {

        public bool Powered { get; }
        public Shape Shape { get; }

        public PoweredRailBlock(Chunk chunk, int x, int y, int z) : base(chunk, x, y, z, 91, 1311) { }

        public PoweredRailBlock(Chunk chunk, int x, int y, int z, ushort state) : base(chunk, x, y, z, 91, state) {
            if(state == 1305) {
                Powered = true;
                Shape = Shape.NorthSouth;
            } else if(state == 1306) {
                Powered = true;
                Shape = Shape.EastWest;
            } else if(state == 1307) {
                Powered = true;
                Shape = Shape.AscendingEast;
            } else if(state == 1308) {
                Powered = true;
                Shape = Shape.AscendingWest;
            } else if(state == 1309) {
                Powered = true;
                Shape = Shape.AscendingNorth;
            } else if(state == 1310) {
                Powered = true;
                Shape = Shape.AscendingSouth;
            } else if(state == 1311) {
                Powered = false;
                Shape = Shape.NorthSouth;
            } else if(state == 1312) {
                Powered = false;
                Shape = Shape.EastWest;
            } else if(state == 1313) {
                Powered = false;
                Shape = Shape.AscendingEast;
            } else if(state == 1314) {
                Powered = false;
                Shape = Shape.AscendingWest;
            } else if(state == 1315) {
                Powered = false;
                Shape = Shape.AscendingNorth;
            } else if(state == 1316) {
                Powered = false;
                Shape = Shape.AscendingSouth;
            }
        }

        public PoweredRailBlock(Chunk chunk, int x, int y, int z, bool powered, Shape shape) : base(chunk, x, y, z, 91, 1311) {
if(powered == true && shape == Shape.NorthSouth) {
                State = 1305;
            } else if(powered == true && shape == Shape.EastWest) {
                State = 1306;
            } else if(powered == true && shape == Shape.AscendingEast) {
                State = 1307;
            } else if(powered == true && shape == Shape.AscendingWest) {
                State = 1308;
            } else if(powered == true && shape == Shape.AscendingNorth) {
                State = 1309;
            } else if(powered == true && shape == Shape.AscendingSouth) {
                State = 1310;
            } else if(powered == false && shape == Shape.NorthSouth) {
                State = 1311;
            } else if(powered == false && shape == Shape.EastWest) {
                State = 1312;
            } else if(powered == false && shape == Shape.AscendingEast) {
                State = 1313;
            } else if(powered == false && shape == Shape.AscendingWest) {
                State = 1314;
            } else if(powered == false && shape == Shape.AscendingNorth) {
                State = 1315;
            } else if(powered == false && shape == Shape.AscendingSouth) {
                State = 1316;
            }
        }
    }
}
