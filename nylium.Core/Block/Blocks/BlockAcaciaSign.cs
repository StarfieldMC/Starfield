// FILE AUTOGENERATED. DO NOT MODIFY
using System;

namespace nylium.Core.Block.Blocks {

    [Block("minecraft:acacia_sign", 158, 3477, 3508, 3478)]
    public class BlockAcaciaSign : BlockBase {

        public override ushort State {
            get {
                if(Rotation == 0 && Waterlogged == true) {
                    return 3477;
                }

                if(Rotation == 0 && Waterlogged == false) {
                    return 3478;
                }

                if(Rotation == 1 && Waterlogged == true) {
                    return 3479;
                }

                if(Rotation == 1 && Waterlogged == false) {
                    return 3480;
                }

                if(Rotation == 2 && Waterlogged == true) {
                    return 3481;
                }

                if(Rotation == 2 && Waterlogged == false) {
                    return 3482;
                }

                if(Rotation == 3 && Waterlogged == true) {
                    return 3483;
                }

                if(Rotation == 3 && Waterlogged == false) {
                    return 3484;
                }

                if(Rotation == 4 && Waterlogged == true) {
                    return 3485;
                }

                if(Rotation == 4 && Waterlogged == false) {
                    return 3486;
                }

                if(Rotation == 5 && Waterlogged == true) {
                    return 3487;
                }

                if(Rotation == 5 && Waterlogged == false) {
                    return 3488;
                }

                if(Rotation == 6 && Waterlogged == true) {
                    return 3489;
                }

                if(Rotation == 6 && Waterlogged == false) {
                    return 3490;
                }

                if(Rotation == 7 && Waterlogged == true) {
                    return 3491;
                }

                if(Rotation == 7 && Waterlogged == false) {
                    return 3492;
                }

                if(Rotation == 8 && Waterlogged == true) {
                    return 3493;
                }

                if(Rotation == 8 && Waterlogged == false) {
                    return 3494;
                }

                if(Rotation == 9 && Waterlogged == true) {
                    return 3495;
                }

                if(Rotation == 9 && Waterlogged == false) {
                    return 3496;
                }

                if(Rotation == 10 && Waterlogged == true) {
                    return 3497;
                }

                if(Rotation == 10 && Waterlogged == false) {
                    return 3498;
                }

                if(Rotation == 11 && Waterlogged == true) {
                    return 3499;
                }

                if(Rotation == 11 && Waterlogged == false) {
                    return 3500;
                }

                if(Rotation == 12 && Waterlogged == true) {
                    return 3501;
                }

                if(Rotation == 12 && Waterlogged == false) {
                    return 3502;
                }

                if(Rotation == 13 && Waterlogged == true) {
                    return 3503;
                }

                if(Rotation == 13 && Waterlogged == false) {
                    return 3504;
                }

                if(Rotation == 14 && Waterlogged == true) {
                    return 3505;
                }

                if(Rotation == 14 && Waterlogged == false) {
                    return 3506;
                }

                if(Rotation == 15 && Waterlogged == true) {
                    return 3507;
                }

                if(Rotation == 15 && Waterlogged == false) {
                    return 3508;
                }

                return DefaultState;
            }

            set {
                if(value == 3477) {
                    Rotation = 0;
Waterlogged = true;
                }

                if(value == 3478) {
                    Rotation = 0;
Waterlogged = false;
                }

                if(value == 3479) {
                    Rotation = 1;
Waterlogged = true;
                }

                if(value == 3480) {
                    Rotation = 1;
Waterlogged = false;
                }

                if(value == 3481) {
                    Rotation = 2;
Waterlogged = true;
                }

                if(value == 3482) {
                    Rotation = 2;
Waterlogged = false;
                }

                if(value == 3483) {
                    Rotation = 3;
Waterlogged = true;
                }

                if(value == 3484) {
                    Rotation = 3;
Waterlogged = false;
                }

                if(value == 3485) {
                    Rotation = 4;
Waterlogged = true;
                }

                if(value == 3486) {
                    Rotation = 4;
Waterlogged = false;
                }

                if(value == 3487) {
                    Rotation = 5;
Waterlogged = true;
                }

                if(value == 3488) {
                    Rotation = 5;
Waterlogged = false;
                }

                if(value == 3489) {
                    Rotation = 6;
Waterlogged = true;
                }

                if(value == 3490) {
                    Rotation = 6;
Waterlogged = false;
                }

                if(value == 3491) {
                    Rotation = 7;
Waterlogged = true;
                }

                if(value == 3492) {
                    Rotation = 7;
Waterlogged = false;
                }

                if(value == 3493) {
                    Rotation = 8;
Waterlogged = true;
                }

                if(value == 3494) {
                    Rotation = 8;
Waterlogged = false;
                }

                if(value == 3495) {
                    Rotation = 9;
Waterlogged = true;
                }

                if(value == 3496) {
                    Rotation = 9;
Waterlogged = false;
                }

                if(value == 3497) {
                    Rotation = 10;
Waterlogged = true;
                }

                if(value == 3498) {
                    Rotation = 10;
Waterlogged = false;
                }

                if(value == 3499) {
                    Rotation = 11;
Waterlogged = true;
                }

                if(value == 3500) {
                    Rotation = 11;
Waterlogged = false;
                }

                if(value == 3501) {
                    Rotation = 12;
Waterlogged = true;
                }

                if(value == 3502) {
                    Rotation = 12;
Waterlogged = false;
                }

                if(value == 3503) {
                    Rotation = 13;
Waterlogged = true;
                }

                if(value == 3504) {
                    Rotation = 13;
Waterlogged = false;
                }

                if(value == 3505) {
                    Rotation = 14;
Waterlogged = true;
                }

                if(value == 3506) {
                    Rotation = 14;
Waterlogged = false;
                }

                if(value == 3507) {
                    Rotation = 15;
Waterlogged = true;
                }

                if(value == 3508) {
                    Rotation = 15;
Waterlogged = false;
                }

            }
        }

        public int Rotation { get; set; } = 0;
        public bool Waterlogged { get; set; } = false;

        public BlockAcaciaSign() {
            State = DefaultState;
        }

        public BlockAcaciaSign(ushort state) : base(state) {
            if(state < MinimumState || state > MaximumState) {
                throw new ArgumentOutOfRangeException("state");
            }

            State = state;
        }

        public BlockAcaciaSign(int rotation, bool waterlogged) {
            Rotation = rotation;
            Waterlogged = waterlogged;
        }
    }
}